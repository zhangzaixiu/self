<?phpnamespace app\common\model;use app\common\ButtonElement;class ProductModel extends BaseModel{    public function getStatusAttr($value,$data)    {        $status = [1=>'上架',2=>'下架'];        return $status[$data['status']];    }    public function getIsRecommendAttr($value,$data)    {        $status = [1=>'是',2=>'否'];        return $status[$data['is_recommend']];    }    public function getOperateAttr($value,$data){        $operation =  [            'show'=>ButtonElement::showLink(url('admin/product/detail',['id'=>$data['id']])),        ];      if($data['status'] == 1){          $operation['status'] = ButtonElement::confirmButton(url('admin/product/status',['id'=>$data['id'],'status'=>2]),'确定下架『'.$data['name'].'』吗?','下架','warning','wb-pause');      }        if( $data['status'] == 2){            $operation['status'] = ButtonElement::confirmButton(url('admin/product/status',['id'=>$data['id'],'status'=>1]),'确定上架『'.$data['name'].'』吗?','上架','success','wb-play');        }        return $operation;    }    public static function getList($input){        try{            $default = [                'sort'=>'id',                'order'=>'desc',                'offset'=>0,                'limit'=>null,            ];            $input = array_merge($default,$input);            $product = self::field('*')->with(['product_category','company']);            if(isset($input['info'])){                $product->whereLike('name|label',"%".$input['info']."%");            }            $product->order($input['sort'],$input['order']);            $product->limit($input['offset'],$input['limit']);            $rows = $product->select();            foreach ($rows as $k => &$v){               $v['operation'] = implode(' ',$v->operate);               $v['img_array'] = $v->img?explode(',',$v->img):[];            }            $count = $product->count();            return ['code'=>1,'total' => $count,'rows'=>$rows];        }catch(\Exception $e) {            return array('code' => 0, 'rows' => [], 'msg' => $e->getMessage());        }    }    public static function getDetail($id){        try{            $product = self::where(['id'=>$id])->with(['product_category','company','product_attr'])->find();            $product_attr = ProductAttrModel::getList(['product_id'=>$id]);            if($product_attr['code'] == 0){                throw new \Exception($product_attr['msg']);            }            $product['product_attr'] = $product_attr['rows'];            $product['img_array'] = $product->img?explode(',',$product->img):[];        }catch(\Exception $e) {            return array('code' => 0, 'rows' => [], 'msg' => $e->getMessage());        }        return $product;    }    public function productAttr()    {        return $this->hasMany(ProductAttrModel::class,'product_id','id');    }    public function productCategory()    {        return $this->hasOne(ProductCategoryModel::class,'id','category_id')->bind([            'category_name'=>'name',        ]);    }    public function company()    {        return $this->hasOne(CompanyModel::class,'id','company_id')->bind([            'company_name'=>'name',        ]);    }}