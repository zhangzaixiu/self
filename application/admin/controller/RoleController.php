<?phpnamespace app\admin\controller;use app\admin\model\UserMenuModel;use app\admin\model\UserModel;use app\admin\model\UserRoleModel;use think\Db;class  RoleController extends  BaseController {    //验证失败时抛出异常    protected $failException = true;    /**     * 创建角色     * @return \think\response\Json     */    public function create(){        try {            $data = [                'role_name' => input('role_name','','trim'),                'menu_ids'=>input('menu_ids','','trim'),            ];            $this->validate($data, 'UserRole.insert');            $user_role = new UserRoleModel($data);            if(!$user_role->save()){                throw new \think\Exception('角色添加失败');            }            $result['msg'] = '角色添加成功';            $result['success'] = true;            $result['type'] = 'create';            return json($result);        } catch (\Exception $e) {            return json(['success' => false, 'msg' => $e->getMessage(), 'data' => []]);        }    }    /**     * 编辑角色     * @return \think\response\Json     */    public function edit(){        try {            $data = [                'role_name' => input('role_name','','trim'),                'menu_ids'=>input('menu_ids','','trim'),                'id'=>input('roleId','','trim')            ];            $this->validate($data, 'UserRole.edit');            $user_role = UserRoleModel::get($data['id']);            if(empty($user_role)){                throw new \think\Exception('角色不存在');            }            if(!$user_role->save($data)){                throw new \think\Exception('角色修改失败');            }            $result['msg'] = '角色修改成功';            $result['success'] = true;            $result['type'] = 'edit';            $result['data'] = $data['id'];            return json($result);        } catch (\Exception $e) {            return json(['success' => false, 'msg' => $e->getMessage(), 'data' => []]);        }    }    /**     * 删除角色     * @return \think\response\Json     */    public function delete()    {        try {            $role_id = input('roleId','','trim');            if (!empty($role_id)) {                Db::startTrans();                $result = UserRoleModel::where(['id'=>$role_id])->delete();                if(!$result){                    throw new \think\Exception('删除角色失败');                }                $user_result = UserModel::where(['role_id'=>$role_id])->update(['role_id' => 0]);                if($user_result === false){                    throw new \think\Exception('修改用户角色失败');                }                Db::commit();                return json(['success' => true, 'msg' => '删除成功']);            }        } catch (\Exception $e) {            Db::rollback();            return json(['success' => false, 'msg' => $e->getMessage()]);        }    }    /**     * 树形菜单,数据格式jstree     * @return \think\response\Json     */    public function menuList()    {        $roleId = input('roleId',-1);        $roleArr = [];        try {            if($roleId != -1){                $roleInfo = UserRoleModel::where(['id'=>$roleId])->column('menu_ids');                $roleArr = explode(",",$roleInfo[0]);            }            $list = UserMenuModel::where(['is_show'=>1,'model'=>'admin'])                ->field('id,name as text,parent_id,level,url')                ->order(['sort'=>'desc'])                ->select();            //查询出父级id字段            $parent_arr = $list->column('parent_id');            if($roleId != -1){                foreach ($list as $k=>$v){                    //筛选出没有子节点的id且在$roleArr中的节点                    if(in_array($v['id'],$roleArr) && !in_array($v['id'],$parent_arr)){                        $list[$k]['state'] = ['selected'=>true];                    }                }            }            $menu = list_to_tree($list, 'id', 'parent_id', 'children', 0);            return json($menu);        } catch (\Exception $e) {            return json(['code' => 0, 'msg' => $e->getMessage()]);        }    }}