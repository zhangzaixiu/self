<?phpnamespace app\admin\controller;use app\admin\model\UserModel;use app\admin\model\UserRoleModel;use think\Request;class UserController extends  BaseController{    /**     * 列表页     * @return \think\response\Json|\think\response\View     */    public function index(){        $this->view->engine->layout(true);        $user = UserModel::field(['role_id','count(role_id) count'])->group('role_id')->select();        $user_role = [];        foreach ($user as $k => $v){            $user_role[$v['role_id']] = $v['count'];        }        $roles = UserRoleModel::field(['id','role_name','is_lock'])->select();        foreach ($roles as $k => $v){            $roles[$k]['count'] = isset($user_role[$v['id']])?$user_role[$v['id']]:0;        }        $count = UserModel::count();        return view('',['roles'=>$roles,'count'=>$count]);    }    //根据角色筛选用户    public function getRoleUser(){        $roleId = input('roleId',0);        $user = UserModel::field('*');        if($roleId != 0){            $user->where(['role_id'=>$roleId]);        }        $user = $user->order(['id'=>'desc'])->select();        foreach ($user as $k => $v){            $user[$k]['role_name'] = isset($v->user_role)?$v->user_role->role_name:'';            $user[$k]['status_alias'] = $v->status_alias;        }        return json(['success' => true, 'data' =>$user]);    }    /**     * 模态框获取初始值     * @param Request $request     * @return \think\response\Json     */    public function initData()    {        $id = input('userId');        $user = ['data'=>[]];        if(!empty($id)){            $user = UserModel::get($id);        }        $auth = UserRoleModel::field('id,role_name as text')->select();        return json(['success' => true,'user'=>$user,'auth'=>$auth]);    }    /**     * 保存用户信息     * @return array     */    public function create(){        try {            $postData = input('request.',null,'trim');            $postData['password'] = md5(md5('888888'));            $postData['user_id'] = $this->userId;            $this->validate($postData, 'User.add');            $user = new UserModel($postData);            if(!$user->save()){                throw new \think\Exception('用户添加失败');            }            return ["code" => 1];        }catch(\Exception $e){            return ['code'=>0,'msg'=>$e->getMessage()];        }    }    /**     * 修改用户信息     * @return array     */    public function edit(){        try {            $postData = input('',null,'trim');            $this->validate($postData, 'User.edit');            $user = UserModel::get($postData['id']);            if(empty($user)){                throw new \think\Exception('用户不存在');            }            if(!$user->force()->save($postData)){                throw new \think\Exception('用户修改失败');            }            return array("code" => 1);        }catch(\Exception $e){            return array('code'=>0,'msg'=>$e->getMessage());        }    }    /**     * @param int $userId     * 重置密码     * @return \think\response\Json     */    function resetdftpwd($userId=0)    {        try {            if(!empty($userId)){                $user = UserModel::get($userId);                if(empty($user)){                    throw new \think\Exception('用户不存在');                }                if(!$user->force()->save(['password'=>md5(md5("888888"))])){                    throw new \think\Exception('重置失败');                }                return json(array('success'=>'1','msg'=>'重置成功','data'=>[]));            }        }catch(\Exception $e){            return json(array('success'=>0,'msg'=>$e->getMessage()));        }    }    /**     * 冻结用户     * @param int $userId     * @param string $status     * @return array     */    function frzy()    {        try{            $userId = input('userId',0);            if(empty($userId)){                throw new \think\Exception("参数错误");            }            $user = UserModel::get($userId);            if(empty($user)){                throw new \think\Exception('用户不存在');            }            if(!$user->force()->save(['status'=>2])){                throw new \think\Exception('冻结用户失败');            }            return array("success" => 1, "msg" =>"冻结用户成功",'data'=>[]);        } catch (\Exception $e) {            return array("success" => 0, "msg" =>$e->getMessage(),'data'=>[]);        }    }    /**     * 解冻用户     * @param int $userId     * @param string $status     * @return array     */    function unfrzy()    {        try{            $userId = input('userId',0);            if(empty($userId)){                throw new \think\Exception("参数错误");            }            $user = UserModel::get($userId);            if(empty($user)){                throw new \think\Exception('用户不存在');            }            if(!$user->force()->save(['status'=>1])){                throw new \think\Exception('解冻用户失败');            }            return array("success" => 1, "msg" =>"解冻用户成功",'data'=>[]);        } catch (\Exception $e) {            return array("success" => 0, "msg" =>$e->getMessage(),'data'=>[]);        }    }    /**     * 修改密码     * @return array|\think\response\View     */    function changePassword(){        $this->view->engine->layout(true);        if(\think\facade\Request::isPost()){            try{                $data = input('','','trim');                $this->validate($data, 'User.changePassword');                $user = UserModel::get(['id'=>$this->userId,'password'=>md5(md5($data['oldpassword']))]);                if(empty($user)){                    throw new \think\Exception('原始密码错误');                }                if(!$user->force()->save(['id'=>$this->userId,'password'=>md5(md5($data['newpassword']))])){                    throw new \think\Exception('修改密码失败');                }                $result['msg'] = '修改成功';                $result['url'] = url('admin/site/logout');                $result['success'] = true;                return $result;            } catch (\Exception $e) {                return array("success" => 0, "msg" =>$e->getMessage(),'data'=>[]);            }        }        return view();    }}